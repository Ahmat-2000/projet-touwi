generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Invitation {
  id                                   Int       @id @default(autoincrement())
  workspace_id                         Int
  owner_id                             Int
  shared_with_id                       Int
  role_id                              Int
  shared_at                            DateTime? @default(now()) @db.Timestamp(0)
  Workspace                            Workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "Invitation_ibfk_1")
  User_Invitation_owner_idToUser       User      @relation("Invitation_owner_idToUser", fields: [owner_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "Invitation_ibfk_2")
  User_Invitation_shared_with_idToUser User      @relation("Invitation_shared_with_idToUser", fields: [shared_with_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "Invitation_ibfk_3")
  Role                                 Role      @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "Invitation_ibfk_4")

  @@unique([workspace_id, shared_with_id, role_id], map: "unique_invitation")
  @@index([owner_id], map: "owner_id")
  @@index([role_id], map: "role_id")
  @@index([shared_with_id], map: "shared_with_id")
}

model Role {
  id                     Int          @id @default(autoincrement())
  name                   String       @unique(map: "unique_role_name") @db.VarChar(100)
  description            String?      @db.Text
  can_read               Boolean?     @default(false)
  can_write              Boolean?     @default(false)
  can_manage_invitations Boolean?     @default(false)
  can_manage_workspace   Boolean?     @default(false)
  can_manage_users       Boolean?     @default(false)
  Invitation             Invitation[]
  UserRole               UserRole[]
}

model User {
  id                                         Int          @id @default(autoincrement())
  username                                   String       @unique(map: "unique_username") @db.VarChar(255)
  password                                   String       @db.VarChar(255)
  is_admin                                   Boolean?     @default(false)
  created_at                                 DateTime?    @default(now()) @db.Timestamp(0)
  updated_at                                 DateTime?    @default(now()) @db.Timestamp(0)
  Invitation_Invitation_owner_idToUser       Invitation[] @relation("Invitation_owner_idToUser")
  Invitation_Invitation_shared_with_idToUser Invitation[] @relation("Invitation_shared_with_idToUser")
  UserRole                                   UserRole[]
}

model UserRole {
  id           Int       @id @default(autoincrement())
  user_id      Int
  role_id      Int
  workspace_id Int
  assigned_at  DateTime? @default(now()) @db.Timestamp(0)
  User         User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "UserRole_ibfk_1")
  Role         Role      @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "UserRole_ibfk_2")
  Workspace    Workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "UserRole_ibfk_3")

  @@unique([user_id, role_id, workspace_id], map: "unique_user_role")
  @@index([role_id], map: "role_id")
  @@index([workspace_id], map: "workspace_id")
}

model Workspace {
  id         Int          @id @default(autoincrement())
  name       String       @db.VarChar(255)
  created_at DateTime?    @default(now()) @db.Timestamp(0)
  updated_at DateTime?    @default(now()) @db.Timestamp(0)
  path       String       @unique(map: "unique_workspace_path") @db.VarChar(255)
  Invitation Invitation[]
  UserRole   UserRole[]
}
